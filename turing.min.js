/**
   The core turing library. We will extend the functinality of the turing library
   through the mentioned turing.functional.js
**/
(function (global) {
    var turing = {
        version: "0.0.1",
        description: "A simple library to learn how to write a javascript framework"
    };
    if (global.turing) {
        throw new Error("Turing has already been defined");
    } else {
        global.turing = turing;
    }
    turing.types = {
        number: function (object) {
            return (object === +object) || (toString.call(object) === '[object Number]');
        },
        array: function (object) {
            return (toString.call(object) === "[object Array]");
        }
    }
    turing.Class = function () {
        return turing.oo.create.apply(this, arguments);
    }

    turing.oo = {
        create: function () {
            var methods = null,
                parent = undefined,
                klass = function () {
                    this.$super = function (method, args) {
                        return turing.oo.$super(this.$parent, this, method, args);
                    };
                    this.initialize.apply(this, arguments);
                };

            if (typeof arguments[0] === 'function') {
                parent = arguments[0];
                methods = arguments[1];
            } else {
                methods = arguments[0];
            }

            if (typeof parent !== 'undefined') {
                turing.oo.extend(klass.prototype, parent.prototype);
                klass.prototype.$parent = parent.prototype;
            }

            turing.oo.mixin(klass, methods);
            turing.oo.extend(klass.prototype, methods);
            klass.prototype.constructor = klass;

            if (!klass.prototype.initialize)
                klass.prototype.initialize = function () {};

            return klass;
        },

        mixin: function (klass, methods) {
            if (typeof methods.include !== 'undefined') {
                if (typeof methods.include === 'function') {
                    turing.oo.extend(klass.prototype, methods.include.prototype);
                } else {
                    for (var i = 0; i < methods.include.length; i++) {
                        turing.oo.extend(klass.prototype, methods.include[i].prototype);
                    }
                }
            }
        },

        extend: function (destination, source) {
            for (var property in source)
                destination[property] = source[property];
            return destination;
        },

        $super: function (parentClass, instance, method, args) {
            return parentClass[method].apply(instance, args);
        }
    };
    turing.enumerable = {
        each: function (object, itrator, context) {
            try {
                if (Array.prototype.forEach && object.forEach == Array.prototype.forEach) {
                    return Array.prototype.forEach.call(object, iterator, context);
                } else {
                    if (turing.types.isNumber(object.length)) /*Means it is an array*/ {
                        for (var i = 0; i != object.length; i++) {
                            iterator.call(context, object[i], i, object);
                        }
                    } else {
                        for (var keys in object) {
                            if (object.hasOwnProperty(key)) {
                                iterator.call(context, object[keys], keys, object);
                            }
                        }
                    }
                }
            } catch (e) {
                if (e != turing.enumerable.Break) throw e;
                return object;
            }
        },

        map: function (object, callback, context) {
            var ret = [];
            if (Array.prototype.map && object.map == Array.prototype.map) {
                return object.map(callback, context);
            } else {
                if (turing.enumerable.isNumber(object.length)) {
                    var result = [];

                    for (var i = 0; i != object.length; i++) {
                        results.push(callback.call(context, object[i], i, object));
                    }
                    return result;
                } else {
                    var result = {};
                    for (key in object) {
                        if (object.hasOwnProperty(key)) {
                            result[key] = callback.call(context, object[key], key, object);
                        }
                    }
                    return result;
                }
            }
        },
        /*Returns the filtered values based on the callback*/
        filter: function (object, callback, context) {
            if (Array.prototype.filter && object.filter == Array.prototype.filter) {
                return object.filter(callback, context);
            }
            var results = [];
            turing.enumerable.each(object, function (val, object, context) {
                if (callback.call(context, val, object)) {
                    results.push(val);
                }
            });
            return results;
        },
        Break: {},
        /*finds the first truthy value and returns there */
        detect: function (object, callback, context) {
            turing.enumerable.each(object, function (val, index, object) {
                if (callback.call(context, val, index, object)) {
                    throw turing.enumerable.Break;
                }
            })
        },
        /*Takes the initial value. Applies a function on it. And reduces it all to 1*/
        reduce: function (object, callback, init) {
            if (arguments.length != 3) {
                throw new Err("Incorrect use of arguments");
            }
            var return_value = init;
            turing.enumerable.each(object, function (value, index, object) {
                return_value = callback.call(return_value, value, index, object);
            });
            return return_value;
        },
        /*Looks through each value in the list, returning the first one that passes
        a truth test (iterator), or undefined if no value passes the test.*/
        find: function(list , iterator , context){
          if(turing.types.array(list)){
              for(var i =0; i!= list.length ; i++){
                  if(iterator.call(context , list[i] , i , list)){
                      // first truthy value. Break and return
                      return i ;
                  }
              }
          } else{ // it is an array 
              for(var values in list){
                  if(iterator.call(context , list[values] , values , list)){
                      return values ;
                  }
              }
          }  
        },
        chain: function (values) {
            return new Chainer(values);
        }
    };

    var Chainer = turing.Class() {
        initialize(values) {
            this.values = values;
        }
        values: function () {
            return this.values;
        }
    };
    // Map selected methods by wrapping them in a closure that returns this each time
    turing.enumerable.each(['map', 'detect', 'filter'], function (methodName) {
        var method = turing.enumerable[methodName];
        turing.enumerable.Chainer.prototype[methodName] = function () {
            var args = Array.prototype.slice.call(arguments);
            args.unshift(this.results);
            this.results = method.apply(this, args);
            return this;
        }
    });
    // Some defined prototypes 
    turing.enumerable.select = turing.enumerable.filter;

})(typeof window == "undefined" ? this : window);